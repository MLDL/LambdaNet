import gtype._
import infer._
import infer.IR.IRModule

// @formatter:off
/**
  * ## Typescript to Predicate Graph
  * [[PredicateGraphConstruction.fromSourceFiles]]: Parses the entire Typescript source files under a root directory into a set of [[infer.PredicateGraph.PredicateModule]]s.
  *
  *   ### Typescript to Surface Language
  *   -- converts Typescript source files into [[GModule]]s.
  *
  *   [parsing.ts](scripts/ts/parsing.ts): Invokes the Typescript Compiler API to parse Typescript source files into the [[GModule]] equivalent Typescript data structure.
  *   [[parsing.ProgramParsing.parseGModule]]: Takes the Json generated by [parsing.ts] and convert them into [[GModule]]
  *
  *   ### Surface Language to Intermediate Representations
  *   * All the exports are collected and stored in [[IR.ModuleExports]] during this stage.
  *   * All the user annotations are put into [[gtype.GStmt.TypeAnnotation]]s.
  *   [[IRTranslation.collectExports]]: Collects the top level exports of a module.
  *   [[IRTranslation.translateModule]]: Translates a [[GModule]] into an [[IRModule]].
  *   [[IRTranslation.TranslationEnv]]: Used during the translation to allocate new [[IR.Var]]s, [[IR.IRType]]s, and [[GTHole]]s.
  *
  *   ### Intermediate Representations to PredicateGraphs
  *   * All the import statements are resolved in this stage.
  *   * All the [[gtype.GStmt.TypeAnnotation]]s are converted into typeLabels.
  *   [[PredicateGraphConstruction.resolveImports]]: Resolves all the imports and put the imported [[IR.IRType]]s into the [[PredicateGraphConstruction.PredicateContext]].
  *   [[PredicateGraphConstruction.encodeModules]]: Encodes a list of [[IRModule]]s into [[PredicateGraph.PredicateModule]]s.
  *
  *   ### PredicateGraphs to Type Embeddings
  *   // todo
  */
// @formatter:on
object WhereAreStuffs {}
